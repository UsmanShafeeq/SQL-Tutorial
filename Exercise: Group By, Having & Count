{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ced5ecc0",
   "metadata": {
    "papermill": {
     "duration": 0.004369,
     "end_time": "2024-08-16T06:35:58.548474",
     "exception": false,
     "start_time": "2024-08-16T06:35:58.544105",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/group-by-having-count).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4fa0a9c",
   "metadata": {
    "papermill": {
     "duration": 0.003602,
     "end_time": "2024-08-16T06:35:58.556321",
     "exception": false,
     "start_time": "2024-08-16T06:35:58.552719",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "Queries with **GROUP BY** can be powerful. There are many small things that can trip you up (like the order of the clauses), but it will start to feel natural once you've done it a few times. Here, you'll write queries using **GROUP BY** to answer questions from the Hacker News dataset.\n",
    "\n",
    "Before you get started, run the following cell to set everything up:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e977de8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:35:58.565822Z",
     "iopub.status.busy": "2024-08-16T06:35:58.565410Z",
     "iopub.status.idle": "2024-08-16T06:36:06.651344Z",
     "shell.execute_reply": "2024-08-16T06:36:06.650096Z"
    },
    "papermill": {
     "duration": 8.093771,
     "end_time": "2024-08-16T06:36:06.653926",
     "exception": false,
     "start_time": "2024-08-16T06:35:58.560155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n",
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "# Set up feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.sql.ex3 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f256d5",
   "metadata": {
    "papermill": {
     "duration": 0.004066,
     "end_time": "2024-08-16T06:36:06.662348",
     "exception": false,
     "start_time": "2024-08-16T06:36:06.658282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The code cell below fetches the `full` table from the `hacker_news` dataset.  We also preview the first five rows of the table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43486ba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:06.672945Z",
     "iopub.status.busy": "2024-08-16T06:36:06.672240Z",
     "iopub.status.idle": "2024-08-16T06:36:08.470297Z",
     "shell.execute_reply": "2024-08-16T06:36:08.469271Z"
    },
    "papermill": {
     "duration": 1.806515,
     "end_time": "2024-08-16T06:36:08.472951",
     "exception": false,
     "start_time": "2024-08-16T06:36:06.666436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>url</th>\n",
       "      <th>text</th>\n",
       "      <th>dead</th>\n",
       "      <th>by</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>type</th>\n",
       "      <th>id</th>\n",
       "      <th>parent</th>\n",
       "      <th>descendants</th>\n",
       "      <th>ranking</th>\n",
       "      <th>deleted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.437504e+09</td>\n",
       "      <td>2015-07-21 18:44:45+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>9924689</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>story</td>\n",
       "      <td>9924843</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>story</td>\n",
       "      <td>9924847</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.437506e+09</td>\n",
       "      <td>2015-07-21 19:14:44+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>9924946</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.437507e+09</td>\n",
       "      <td>2015-07-21 19:23:57+00:00</td>\n",
       "      <td>story</td>\n",
       "      <td>9925022</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  title   url  text  dead    by  score          time  \\\n",
       "0  None  None  None  None  None    NaN  1.437504e+09   \n",
       "1  None  None  None  None  None    NaN           NaN   \n",
       "2  None  None  None  None  None    NaN           NaN   \n",
       "3  None  None  None  None  None    NaN  1.437506e+09   \n",
       "4  None  None  None  None  None    NaN  1.437507e+09   \n",
       "\n",
       "                  timestamp   type       id  parent  descendants  ranking  \\\n",
       "0 2015-07-21 18:44:45+00:00  story  9924689     NaN          NaN      NaN   \n",
       "1                       NaT  story  9924843     NaN          NaN      NaN   \n",
       "2                       NaT  story  9924847     NaN          NaN      NaN   \n",
       "3 2015-07-21 19:14:44+00:00  story  9924946     NaN          NaN      NaN   \n",
       "4 2015-07-21 19:23:57+00:00  story  9925022     NaN          NaN      NaN   \n",
       "\n",
       "  deleted  \n",
       "0    True  \n",
       "1    None  \n",
       "2    None  \n",
       "3    True  \n",
       "4    True  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from google.cloud import bigquery\n",
    "\n",
    "# Create a \"Client\" object\n",
    "client = bigquery.Client()\n",
    "\n",
    "# Construct a reference to the \"hacker_news\" dataset\n",
    "dataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n",
    "\n",
    "# API request - fetch the dataset\n",
    "dataset = client.get_dataset(dataset_ref)\n",
    "\n",
    "# Construct a reference to the \"full\" table\n",
    "table_ref = dataset_ref.table(\"full\")\n",
    "\n",
    "# API request - fetch the table\n",
    "table = client.get_table(table_ref)\n",
    "\n",
    "# Preview the first five lines of the table\n",
    "client.list_rows(table, max_results=5).to_dataframe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1195722",
   "metadata": {
    "papermill": {
     "duration": 0.004147,
     "end_time": "2024-08-16T06:36:08.481671",
     "exception": false,
     "start_time": "2024-08-16T06:36:08.477524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises\n",
    "\n",
    "### 1) Prolific commenters\n",
    "\n",
    "Hacker News would like to send awards to everyone who has written more than 10,000 posts. Write a query that returns all authors with more than 10,000 posts as well as their post counts. Call the column with post counts `NumPosts`.\n",
    "\n",
    "In case sample query is helpful, here is a query you saw in the tutorial to answer a similar question:\n",
    "```\n",
    "query = \"\"\"\n",
    "        SELECT parent, COUNT(1) AS NumPosts\n",
    "        FROM `bigquery-public-data.hacker_news.full`\n",
    "        GROUP BY parent\n",
    "        HAVING COUNT(1) > 10\n",
    "        \"\"\"\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a998be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:08.492369Z",
     "iopub.status.busy": "2024-08-16T06:36:08.491602Z",
     "iopub.status.idle": "2024-08-16T06:36:10.034618Z",
     "shell.execute_reply": "2024-08-16T06:36:10.033486Z"
    },
    "papermill": {
     "duration": 1.551024,
     "end_time": "2024-08-16T06:36:10.037115",
     "exception": false,
     "start_time": "2024-08-16T06:36:08.486091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         author  NumPosts\n",
      "0          jerf     15998\n",
      "1  emodendroket     11920\n",
      "2         sneak     14517\n",
      "3    pessimizer     13521\n",
      "4     ryandrake     10660\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_ProlificCommenters\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Query to select prolific commenters and post counts\n",
    "prolific_commenters_query = \"\"\"\n",
    "                            SELECT `by` AS author, COUNT(1) AS NumPosts\n",
    "                            FROM `bigquery-public-data.hacker_news.full`\n",
    "                            GROUP BY author\n",
    "                            HAVING COUNT(1) > 10000\n",
    "                            \"\"\"\n",
    "\n",
    "# Set up the query (cancel the query if it would use too much of \n",
    "# your quota, with the limit set to 1 GB)\n",
    "safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\n",
    "query_job = client.query(prolific_commenters_query, job_config=safe_config)\n",
    "\n",
    "# API request - run the query, and return a pandas DataFrame\n",
    "prolific_commenters = query_job.to_dataframe()\n",
    "\n",
    "# View top few rows of results\n",
    "print(prolific_commenters.head())\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ca3a4e4",
   "metadata": {
    "papermill": {
     "duration": 0.004527,
     "end_time": "2024-08-16T06:36:10.046465",
     "exception": false,
     "start_time": "2024-08-16T06:36:10.041938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For the solution, uncomment the line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "897ac593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:10.058041Z",
     "iopub.status.busy": "2024-08-16T06:36:10.057627Z",
     "iopub.status.idle": "2024-08-16T06:36:10.062597Z",
     "shell.execute_reply": "2024-08-16T06:36:10.061472Z"
    },
    "papermill": {
     "duration": 0.013451,
     "end_time": "2024-08-16T06:36:10.065054",
     "exception": false,
     "start_time": "2024-08-16T06:36:10.051603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55b325ef",
   "metadata": {
    "papermill": {
     "duration": 0.00447,
     "end_time": "2024-08-16T06:36:10.074442",
     "exception": false,
     "start_time": "2024-08-16T06:36:10.069972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2) Deleted comments\n",
    "\n",
    "How many comments have been deleted? (If a comment was deleted, the `deleted` column in the table will have the value `True`.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57d795aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:10.085987Z",
     "iopub.status.busy": "2024-08-16T06:36:10.085589Z",
     "iopub.status.idle": "2024-08-16T06:36:10.090288Z",
     "shell.execute_reply": "2024-08-16T06:36:10.089150Z"
    },
    "papermill": {
     "duration": 0.013694,
     "end_time": "2024-08-16T06:36:10.092874",
     "exception": false,
     "start_time": "2024-08-16T06:36:10.079180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Write your query here and figure out the answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bf2a52b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:10.104215Z",
     "iopub.status.busy": "2024-08-16T06:36:10.103830Z",
     "iopub.status.idle": "2024-08-16T06:36:11.442475Z",
     "shell.execute_reply": "2024-08-16T06:36:11.441301Z"
    },
    "papermill": {
     "duration": 1.346885,
     "end_time": "2024-08-16T06:36:11.444725",
     "exception": false,
     "start_time": "2024-08-16T06:36:10.097840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   num_deleted_posts\n",
      "0            1204120\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_NumDeletedPosts\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Query to determine how many posts were deleted\n",
    "deleted_posts_query = \"\"\"\n",
    "                      SELECT COUNT(1) AS num_deleted_posts\n",
    "                      FROM `bigquery-public-data.hacker_news.full`\n",
    "                      WHERE deleted = True\n",
    "                      \"\"\"\n",
    "\n",
    "# Set up the query\n",
    "query_job = client.query(deleted_posts_query)\n",
    "\n",
    "# API request - run the query, and return a pandas DataFrame\n",
    "deleted_posts = query_job.to_dataframe()\n",
    "\n",
    "# View results\n",
    "print(deleted_posts)\n",
    "\n",
    "num_deleted_posts = 1204120\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4015d673",
   "metadata": {
    "papermill": {
     "duration": 0.004949,
     "end_time": "2024-08-16T06:36:11.455489",
     "exception": false,
     "start_time": "2024-08-16T06:36:11.450540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For the solution, uncomment the line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e8c3fce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-16T06:36:11.467757Z",
     "iopub.status.busy": "2024-08-16T06:36:11.467269Z",
     "iopub.status.idle": "2024-08-16T06:36:11.472498Z",
     "shell.execute_reply": "2024-08-16T06:36:11.471217Z"
    },
    "papermill": {
     "duration": 0.014215,
     "end_time": "2024-08-16T06:36:11.474982",
     "exception": false,
     "start_time": "2024-08-16T06:36:11.460767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d9a3cbd",
   "metadata": {
    "papermill": {
     "duration": 0.0049,
     "end_time": "2024-08-16T06:36:11.485125",
     "exception": false,
     "start_time": "2024-08-16T06:36:11.480225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going\n",
    "**[Click here](https://www.kaggle.com/dansbecker/order-by)** to move on and learn about the **ORDER BY** clause."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57a2e370",
   "metadata": {
    "papermill": {
     "duration": 0.004764,
     "end_time": "2024-08-16T06:36:11.495018",
     "exception": false,
     "start_time": "2024-08-16T06:36:11.490254",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6057,
     "sourceId": 285982,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16.477889,
   "end_time": "2024-08-16T06:36:12.221807",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-16T06:35:55.743918",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
